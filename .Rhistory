# Build Package
library( PREP )
PREP::AddFunctionToPkg( "SelectExpThatAreBetterThanCtrl", "")
library(CyneRgy)
library( pkgdown )
pkgdown::build_site()
help( package = "CyneRgy")
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
library(CyneRgy)
pkgdown::build_site()
?SelectExpThatAreBetterThanCtrl
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
?CyneRgy::SelectExpThatAreBetterThanCtrl
library(CyneRgy)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
?system.file
library(CyneRgy)
strRStudioProjFile <- system.file("Examples", example,"TreatmentSelection.Rproj", package = strPackage)
strRStudioProjFile <- system.file("Examples", "TreatmentSelection","TreatmentSelection.Rproj", package = "CyneRgy")
strRStudioProjFile
system2( strRStudioProjFile )
system2( strRStudioProjFile , invisible = FALSE)
system2( paste("start rstudio --project=", shQuote(strRStudioProjFile)) , invisible = FALSE)
system2( paste(shQuote(strRStudioProjFile)) , invisible = FALSE)
system( strRStudioProjFile )
rstudioapi::openProject(strRStudioProjFile )
?rstudioapi::openProject
library(CyneRgy)
library(CyneRgy)
CyneRgy::RunExample("TreamtneSelection")
CyneRgy::RunExample("TreatmentSelection")
library( rstudioapi)
rstudioapi::isAvailable()
library(CyneRgy)
CyneRgy::RunExample("TreatmentSelection")
library(CyneRgy)
CyneRgy::RunExample("TreatmentSelection")
library(CyneRgy)
UserParam <- list( maxSelection = 3, Rank1 =2, Rank2 =1, Rank3 =1 )
selected_elements <- UserParam[grep("^Rank", names(UserParam))]
selected_elements
UserParam[[selected_elements]]
UserParam[selected_elements]
selected_elements
as.vector( selected_elements )
unlist( selected_elements )
vRet <- unlist( selected_elements)
vRet
class(vRet)
library(CyneRgy)
library(CyneRgy)
CyneRgy::SelectSpecifiedNumberOfExpWithHighestResponses
library( Roxygen)
library( roxygen2)
install.packages("roxygen2")
library(CyneRgy)
CyneRgy::SelectSpecifiedNumberOfExpWithHighestResponses
library(CyneRgy)
UserParam <- list( QtyOfArmsToSelect = 2, Rank1AllocationRatio = 2, Rank2AllocationRatio = 1 )
UserParam[grep("^Rank", names(UserParam))]
unlist( lRankElements )[1:UserParam$QtyOfArmsToSelect]
lRankElements
lRankElements  <- UserParam[grep("^Rank", names(UserParam))]
unlist( lRankElements )[1:UserParam$QtyOfArmsToSelect]
library(CyneRgy)
SelectSpecifiedNumberOfExpWithHighestResponses()
library(CyneRgy)
library(CyneRgy)
setwd( "C:\\Kyle\\Cytel\\Software\\CyneRgy\\" )
getwd()
library(CyneRgy)
SelectSpecifiedNumberOfExpWithHighestResponses
library(CyneRgy)
x <- readRDS("C:/Kyle/Cytel/Software/CyneRgy/x.Rds")
library(CyneRgy)
library(CyneRgy)
library(CyneRgy)
CyneRgy::SelectMe
library(CyneRgy)
?grep
SelectMe <- CyneRgy::SelectMe()
SelectMe <- CyneRgy::SelectMe
SelectMe
CyneRgy::SelectMe
library(CyneRgy)
library(CyneRgy)
library(CyneRgy)
CyneRgy::RunExample()
CyneRgy::RunExample("TreatmentSelection")
install.packages("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
library(CyneRgy)
CyneRgy::RunExample("TreatmentSelection")
library(CyneRgy)
library(CyneRgy)
CyneRgy::RunExample("TreatmentSelection")
library( CyneRgy)
CyneRgy::RunExample()
library(pkgdown)
pkgdown::build_site()
help( package="CyneRgy")
CyneRgy::RunExample("TreatmentSelection")
pkgdown::build_site()
CyneRgy::RunExample("TreatmentSelection")
library(CyneRgy)
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
S = 100000, Pc = 0.15, Na = 3000, Nc = 1500, VE = 0.8, VE0 = 0.45
S = 100000; Pc = 0.15; Na = 3000; Nc = 1500; VE = 0.8; VE0 = 0.45
c <- Nc/Na
Pa <- (1-VE)*Pc
Pa
c <- Nc/Na
Pa <- (1-VE)*Pc
Xc <- rbinom(n = S, size = Nc, prob = Pc)
Xa <- rbinom(n = S, size = Na, prob = Pa)
a <- (1-VE0)*(1+c*Xc/Nc)+c+Xa/Na
b <- (1-VE0)*(c*Xc/Nc+Xa/Na)
Pa_tilde <- (a-sqrt(a^2-4*b*(1+c)))/(2*(1+c))
Pc_tilde <- Pa_tilde/(1-VE0)
sigma0_tilde <- sqrt( Pa_tilde*(1-Pa_tilde)+1/c*(1-VE0)^2*Pc_tilde*(1-Pc_tilde) )
c <- Nc/Na
S = 100000, Pc = 0.15, Na = 3000, Nc = 1500, VE = 0.8, VE0 = 0.45
S = 100000; Pc = 0.15; Na = 3000; Nc = 1500; VE = 0.8; VE0 = 0.45
c <- Nc/Na
Pa <- (1-VE)*Pc
Xc <- rbinom(n = S, size = Nc, prob = Pc)
Xa <- rbinom(n = S, size = Na, prob = Pa)
c <- Nc/Na
Pa <- (1-VE)*Pc
Xc <- rbinom(n = S, size = Nc, prob = Pc)
Xa <- rbinom(n = S, size = Na, prob = Pa)
a <- (1-VE0)*(1+c*Xc/Nc)+c+Xa/Na
b <- (1-VE0)*(c*Xc/Nc+Xa/Na)
Pa_tilde <- (a-sqrt(a^2-4*b*(1+c)))/(2*(1+c))
Pc_tilde <- Pa_tilde/(1-VE0)
sigma0_tilde <- sqrt( Pa_tilde*(1-Pa_tilde)+1/c*(1-VE0)^2*Pc_tilde*(1-Pc_tilde) )
Z <- (Xa/Na-(1-VE0)*Xc/Nc)/sigma0_tilde*sqrt(Na)
Z[ 1:5, ]
Z[ 1:5]
pnrom( Z[1:5])
pnorm( Z[1:5])
?rbinom
nQtyReps = 100000; P1 = 0.15; N2 = 3000; N1 = 1500; VE = 0.8; PI0 = 0.45
c <- Nc/Na
Pa <- (1-VE)*Pc
Xc <- rbinom(n = S, size = Nc, prob = Pc)
Xa <- rbinom(n = S, size = Na, prob = Pa)
c    <- N1/N2
P2   <- (1-VE)*P1
c    <- N1/N2
P2   <- (1-VE)*P1
Pa <- (1-VE)*Pc
pA
Pa
P2
Xc <- rbinom(n = S, size = Nc, prob = Pc)
Xa <- rbinom(n = S, size = Na, prob = Pa)
vX1 <- Xc
vX2 <- Xa
a <- (1-VE0)*(1+c*Xc/Nc)+c+Xa/Na
b <- (1-VE0)*(c*Xc/Nc+Xa/Na)
a
vP1Hat   <- vX1/N1
vP2Hat   <- vX2/N2
vA       <- ( 1 - PI0 ) * ( 1+ c*vP1Hat ) + c + vP2Hat
vB       <- ( 1 - PI0 ) * ( c*vP1Hat + vP2Hat )
vA[1:5]
a[1:5]
Pa_tilde <- (a-sqrt(a^2-4*b*(1+c)))/(2*(1+c))
Pc_tilde <- Pa_tilde/(1-VE0)
vP2Tilde <- ( vA - ( vA^2 - 4*vB*( 1 + c ))^(1/2) )/ ( 2*(1+c))
vP1Tilde <- vP2Tilde/( 1 - PI0 )
Pa_tilde[1:5]
vP2Tilde[1:5]
sigma0_tilde <- sqrt( Pa_tilde*(1-Pa_tilde)+1/c*(1-VE0)^2*Pc_tilde*(1-Pc_tilde) )
Z <- (Xa/Na-(1-VE0)*Xc/Nc)/sigma0_tilde*sqrt(Na)
vSigmaHat <- sqrt( vP2Tilde * ( 1 - vP2Tilde) + (1/c) * ((1-PI0)^2) *vP1Tilde*(1-vP1Tilde) )
vZ        <- ( vP2Hat - ( 1 - PI0 )*vP2Hat )/( vSigmaHat/sqrt( N2 ) )
sigma0_tilde[1:5]
vSigmaHat[1:5]
vZ[1:5]
Z[1:5]
Z <- (Xa/Na-(1-VE0)*Xc/Nc)/sigma0_tilde*sqrt(Na)
vNum1 <- (Xa/Na-(1-VE0)*Xc/Nc)
vNum2 <-( vP2Hat - ( 1 - PI0 )*vP2Hat )
vNum1[1:5]
vNum2[1:5]
PI0
VE0
(Xa/Na)[1:5]
vP2Hat[1:5]
vP1Hat[1:5]
(Xc/Nc)[1:5]
Z <- (Xa/Na-(1-VE0)*Xc/Nc)
vZ        <- ( vP2Hat - ( 1 - PI0 )*vP2Hat )
Z[1:5]
vZ[1:5]
(Xa/Na)[1:5]
vP2Hat[1:5]
((1-VE0)*Xc/Nc)[1:5]
(( 1 - PI0 )*vP2Hat)[1:5]
PI0
VE0
vZ        <- ( vP1Hat - ( 1 - PI0 )*vP2Hat )
Z[1:5]
vZ[1:5]
vP1Hat
vP1Hat[1]
vZ        <- ( vP2Hat - ( 1 - PI0 )*vP1Hat )
vZ[1]
Z[1]
Z <- (Xa/Na-(1-VE0)*Xc/Nc)/sigma0_tilde*sqrt(Na)
vZ        <- ( vP2Hat - ( 1 - PI0 )*vP1Hat )/( vSigmaHat/sqrt( N2 ) )
vZ[1]
Z[1]
?tools::file_path_sans_ext
tools::file_path_sans_ext( "FileName.R")
tools::file_ext( "FileName.R")
tools::file_ext( "FileName")
?file.path
PREP::AddFunctionToPkg("ReplaceTagsInFile", "This function is used to replace {{tags}} in template files.")
install.packages("whisker")
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
vValidExamples
vValidExamples <- list.files(system.file("Templates", package = strPackage))
vValidExamples
vValidExamples <- tools::file_path_sans_ext(list.files(system.file("Templates", package = strPackage)) )
vValidExamples
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
vValidExamples
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
strFunctionType
vValidExamples
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationXX")
CyneRgy::CreateCyneRgyFuntion( "PatientSimulation","SimulateBiomodalPatientData")
CyneRgy::CreateCyneRgyFuntion( "PatientSimulationOutcome","SimulateBiomodalPatientData")
CyneRgy::CreateCyneRgyFuntion( "SimulationPatientOutcome","SimulateBiomodalPatientData")
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
strDirectory
strDirectory
strNewFilePath
strDirectory
strNewFilePath <- file.path(strDirectory, ifelse(strNewFileName == "", basename(strSelectedExample), strNewFileName), ".", strNewFileExt)
strNewFilePath
strDirectory
ifelse(strNewFileName == "", basename(strSelectedExample), strNewFileName)
strNewFilePath <- paste0(strDirectory, ifelse(strNewFileName == "", basename(strSelectedExample), strNewFileName), ".", strNewFileExt)
strNewFilePath
strNewFilePath <- paste0(strDirectory, ifelse(strNewFileName == "", basename(strSelectedExample), strNewFileName), strNewFileExt)
strNewFilePath
strNewFilePath <- paste0(strDirectory, ifelse(strNewFileName == "", basename(strSelectedExample), strNewFileName),"/", strNewFileExt)
strNewFilePath
strNewFilePath <- paste0(strDirectory, "/",ifelse(strNewFileName == "", basename(strSelectedExample), strNewFileName), strNewFileExt)
strNewFilePath
strSelectedExample
?list.files
?system.files
?system.file
?list.files
vValidExamplesFullPath <- tools::file_path_sans_ext(list.files(system.file("Templates", package = strPackage), full.names = TRUE) )
strPackage <- "CyneRgy"
vValidExamplesFullPath <- tools::file_path_sans_ext(list.files(system.file("Templates", package = strPackage), full.names = TRUE) )
vValidExamplesFullPath
vValidExamples
vValidExamples <- tools::file_path_sans_ext(list.files(system.file("Templates", package = strPackage)) )
vValidExamplesFullPath
vValidExamples
vValidExamples[ grep( strFunctionType, vValidExamples)]
strFunctionType <- "SimulatePatientOutcome"
vValidExamples[ grep( strFunctionType, vValidExamples)]
vValidExamplesFullPath[ grep( strFunctionType, vValidExamples)]
strSelectedExample
strSelectedExample <- vValidExamplesFullPath[grep(strFunctionType, vValidExamples)]
strSelectedExample
vValidExamplesFullPath
vValidExamplesFullPath <- list.files(system.file("Templates", package = strPackage), full.names = TRUE)
strSelectedExample <- vValidExamplesFullPath[grep(strFunctionType, vValidExamples)]
strSelectedExample
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
strSelectedExample
strNewFilePath
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
strSelectedExample
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
strNewFilePath
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
library(whisker)
library(CyneRgy)
CyneRgy::CreateCyneRgyFuntion( "SimulatePatientOutcome","SimulateBiomodalPatientData")
library(CyneRgy)
pkgdown::build_site()
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
help( package = "pkgdown")
library(CyneRgy)
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
vignette("pkgdown")
library(CyneRgy)
library(CyneRgy)
pkgdown::build_site()
pkgdown::build_site()
vignette("pkgdown")
library(CyneRgy)
pkgdown::build_site()
CyneRgy::CreateCyneRgyFuntion()
CyneRgy::CreateCyneRgyFuntion("SimulatePatientOutput")
CyneRgy::CreateCyneRgyFuntion("SimulatePatientOutcome")
CyneRgy::CreateCyneRgyFuntion("SimulatePatientOutcome", "SimulateMultivariateNormal")
library(CyneRgy)
pkgdown::build_site()
CyneRgy::RunExample("TreatmentSelection")
pkgdown::build_site()
CyneRgy::RunExample("TreatmentSelection")
CyneRgy::RunExample("2ArmNormalOutcomePatientSimultion")
dirname()
library( PREP ) # See https://biopharmsoftgrp.github.io/PREP/
library( tools)
vFilesToAdd <- tools::file_path_sans_ext( dir( "AddUsingPREP") )
for( iFile in 1:length( vFilesToAdd ) )
{
PREP::AddFunctionToPkg( vFilesToAdd[ iFile ], "" )    # This will create the file and corresponding test file
file.copy( paste0( "AddUsingPREP/", vFilesToAdd[ iFile ], ".R"), paste0( "R/", vFilesToAdd[ iFile ], ".R" ), overwrite = TRUE )
}
library(CyneRgy)
pkgdown::build_site()
?CyneRgy::SimulatePatientSurvivalMixtureExponentials
vFilesToAdd <- tools::file_path_sans_ext( dir( "AddUsingPREP") )
for( iFile in 1:length( vFilesToAdd ) )
{
PREP::AddFunctionToPkg( vFilesToAdd[ iFile ], "" )    # This will create the file and corresponding test file
file.copy( paste0( "AddUsingPREP/", vFilesToAdd[ iFile ], ".R"), paste0( "R/", vFilesToAdd[ iFile ], ".R" ), overwrite = TRUE )
}
library(CyneRgy)
pkgdown::build_site()
pkgdown::build_site()
?SimulatePatientOutcomePercentAtZero
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
?SimulatePatientOutcomePercentAtZeroBetaDist
library(CyneRgy)
?SimulatePatientOutcomePercentAtZeroBetaDist
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
library(CyneRgy)
pkgdown::build_site()
library(CyneRgy)
pkgdown::build_site()
dMu <- 10
vK <- c(seq( 0.01, 10, 0.01), seq( 10, 10000,1))
vVar <- dMu + dMu*dMu/vK
plot( vK, vVar, type = 'l')
dMu <- 10
vK <- c(seq( 0.01, 10, 0.01), seq( 10, 100,1))
vVar <- dMu + dMu*dMu/vK
plot( vK, vVar, type = 'l')
dMu <- 10
vK <- c(seq( 0.01, 10, 0.01), seq( 10, 20,1))
vVar <- dMu + dMu*dMu/vK
plot( vK, vVar, type = 'l')
dMu <- 10
vK <- c(seq( 0.01, 10, 0.01), seq( 10, 20,1))
vVar <- dMu + dMu*dMu/vK
plot( vK, vVar, type = 'l', ylim= c( 0, 100))
black <- c(119,16,12,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
resp
black <- c(119,16,12,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))),
levels = c("white","black"))
resp
vVar <- dMu + dMu*dMu/vK
plot( vK, vVar, type = 'l', ylim= c( 0, 100))
black <- c(119,16,12,7,3,2,0)
white <- c(1070,60,14,4,0,0,1)
resp <- c(rep(0:6,times=black), rep(0:6,times=white))
race <- factor(c(rep("black", sum(black)), rep("white", sum(white))),
levels = c("white","black"))
victim <- data.frame(resp, race)
victim
library(CyneRgy)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
